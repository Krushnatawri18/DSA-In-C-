/*
You are given an 'N' * 'M' sized binary-valued matrix 'MAT, where 'N' is the number of rows and 'M' is the number of columns. 
You need to return the maximum size (area) of the submatrix which consists of all 1’s i.e. 
the maximum area of a submatrix in which each cell has only the value ‘1’.

Note:
1. Binary valued matrix has only two values in each cell : 0 and 1.
2. A submatrix is a matrix formed by selecting certain rows and columns from a larger matrix.
3. The area of a matrix with 'h' rows and 'w' columns is equal to 'h' * 'w'. 

Sample Input 1:
2
2 2
1 1
1 1
5 4
1 0 1 1
1 0 1 1
0 1 0 1
1 1 1 1
0 0 0 1
Sample Output 1:
4
5
Explanation For Sample Input 1:
For First Test Case: It is easy to see that whole matrix of size 2 * 2 contains '1' only hence the required area will be 4.

TC - O(N X M)
SC - O(M) M = number of cols
*/

#include<bits/stdc++.h>

 vector<int> nextSmallerElement(vector<int> &arr, int n) {
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);

        for(int i=n-1; i>=0 ; i--) {
            int curr = arr[i];
            while(s.top() != -1 && arr[s.top()] >= curr)
            {
                s.pop();
            }
            //ans is stack ka top
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    
    vector<int> prevSmallerElement(vector<int> &arr, int n) {
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);

        for(int i=0; i<n; i++) {
            int curr = arr[i];
            while(s.top() != -1 && arr[s.top()] >= curr)
            {
                s.pop();
            }
            //ans is stack ka top
            ans[i] = s.top();
            s.push(i);
        }
        return ans; 
    }    
    
  int largestRectangle(vector<int> &heights, int n) {

        vector<int> next(n);
        next = nextSmallerElement(heights, n);
            
        vector<int> prev(n);
        prev = prevSmallerElement(heights, n);
        
        int area = INT_MIN;
        for(int i=0; i<n; i++) {
            int l = heights[i];
            
            if(next[i] == -1) {
                next[i] = n;
            }
             int b = next[i] - prev[i] - 1;
            int newArea = l*b;
            area = max(area, newArea);
        }
        return area;
    }

int maximalAreaOfSubMatrixOfAll1(vector<vector<int>> &mat, int n, int m){
	
  // computing first row
	int area = largestRectangle(mat[0], m);

  // computing remaining rows
	for(int i=1; i<n; i++){
		for(int j=0; j<m; j++){

      // adding upper row with current layer if its not equal to 0
			if(mat[i][j] != 0){
				mat[i][j] = mat[i][j] + mat[i-1][j];
			}
			else{
				mat[i][j] = 0;
			}
		}
		int newArea = largestRectangle(mat[i], m);
		area = max(area, newArea);
	}

	return area;

}
