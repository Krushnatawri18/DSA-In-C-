/*
Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).

Example 1:
Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output: 4 2 2 1 8 7 6 5 
Explanation: 
The first 4 elements 1,2,2,4 are reversed first 
and then the next 4 elements 5,6,7,8. Hence, the 
resultant linked list is 4->2->2->1->8->7->6->5.

Example 2:
Input:
LinkedList: 1->2->3->4->5
K = 3
Output: 3 2 1 5 4 
Explanation: 
The first 3 elements are 1,2,3 are reversed 
first and then elements 4,5 are reversed.Hence, 
the resultant linked list is 3->2->1->5->4.

Runtime - 60 ms

TC - O(N)
SC - O(1)
*/

class Solution
{
    public:
    struct node *reverse (struct node *head, int k)
    { 
        // using recursion 
        // base case 
        if(head == NULL)
        {
            return head;
        }
        
        struct node * prev = NULL;
        struct node * curr = head;
        struct node * next = NULL;
        int count = 0;
        
        // traversing till either curr is not equal to NULL or count is less than k
        // first time curr is on head then after first iteration it will go on head -> next and after that on head -> next-> next that is NULL
        // eg. 3 - 5 - 7 - 9
        // 5 - 3 - NULL (later on remaining part will be attached)
        while(curr != NULL && count < k)
        {
            next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = next;
            count++;
        }
        
        // curr is head that is pointing on first k reversed node list
        // like prev -> curr (head) -> head->next (next) ....
        head -> next = reverse(next , k);
        
        // prev is pointing to head of first k reversed node list that is head of whole k reversed list
        return prev;
        
    }
};
