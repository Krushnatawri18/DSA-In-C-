/*
Your task is to implement  2 stacks in one array efficiently. You need to implement 4 methods.

twoStacks : Initialize the data structures and variables to be used to implement  2 stacks in one array.
push1 : pushes element into first stack.
push2 : pushes element into second stack.
pop1 : pops element from first stack and returns the popped element. If first stack is empty, it should return -1.
pop2 : pops element from second stack and returns the popped element. If second stack is empty, it should return -1.

TC - O(1)
SC - O(N)
*/

class twoStacks
{
    public:
        int *arr;
        int top1;
        int top2;
        int size;
    
    twoStacks(int n=100)
    {
        size=n;
        arr=new int[size];
        top1=-1;
        top2=size;
    }
 
    //Function to push an integer into the stack1.
    void push1(int x)
    {
        // at least one space is remaining
        if(top2-top1>1){
            top1++;
            arr[top1]=x;
        }
    }
    
    //Function to push an integer into the stack2.
    void push2(int x)
    {
       // at least one space is remaining
       if(top2-top1>1){
           top2--;
           arr[top2]=x;
       }
    }
    
    //Function to remove an element from top of the stack1.
    int pop1()
    {
        int ans=-1;
        if(top1>=0){
            ans=arr[top1];
            top1--;
        }
        return ans;
    }
    
    //Function to remove an element from top of the stack2.
    int pop2()
    {
       int ans=-1;
       if(top2<size){
           ans=arr[top2];
           top2++;
       }
       return ans;
    }
};
