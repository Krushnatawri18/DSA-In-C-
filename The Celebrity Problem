/*
A celebrity is a person who is known to all but does not know anyone at a party. 
If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. 
Here M[i][i] will always be 0.

Example 1:
Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity. 

Example 2:
Input:
N = 2
M[][] = {{0 1},
         {1 0}}
Output: -1
Explanation: The two people at the party both
know each other. None of them is a celebrity.

TC - O(N)
SC - O(N)
*/

class Solution 
{
    private:
    bool knows(vector<vector<int>>& M, int A, int B){
        // checking A row B col has value 1 or not
        if(M[A][B] == 1){
            return true;
        }
        return false;
    }
    
    public:
    int celebrity(vector<vector<int> >& M, int n) 
    {
        stack<int> s;
        
        for(int i=0; i<n; i++){
            s.push(i);
        }
        
        while(s.size() > 1){
            
            int A = s.top();
            s.pop();
            
            int B = s.top();
            s.pop();
            
            // checking whether A knows B or not
            if(knows(M,A,B)){
                s.push(B);
            }
            else{
                s.push(A);
            }
            
        }
        // top element of stack is potential candidate for celebrity
        int candidate = s.top();
        
        // verifying the candidate
        
        // checking row that is candidate knows no one
        int zeroCount = 0;
        
        for(int i=0; i<n; i++){
            if(M[candidate][i] == 0){
                zeroCount++;
            }
        }
        
        if(zeroCount != n){
            return -1;
        }
        
        // checking col that is everyone knows candidate
        int oneCount = 0;
        
        for(int i=0; i<n; i++){
            if(M[i][candidate] == 1){
                oneCount++;
            }
        }
        
        if(oneCount != n-1){
            return -1;
        }
        
        return candidate;
    }
};
