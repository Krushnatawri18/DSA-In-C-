/*
Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.

Example 1:
Input:
N = 5
Arr[] = {1,2,3,-2,5}
Output:
9
Explanation:
Max subarray sum is 9
of elements (1, 2, 3, -2, 5) which is a contiguous subarray.

Example 2:
Input:
N = 4
Arr[] = {-1,-2,-3,-4}
Output:
-1
Explanation:
Max subarray sum is -1 of element (-1)

Runtime - 30 ms

TC -  O(N)
SC - o(1)
*/

class Solution{
    public:
    long long maxSubarraySum(int arr[], int n){
        
        int j = 0;
        int currSum = 0;
        int maxSum = arr[j];
        for(int i = 0; i < n; i++){
            currSum = currSum + arr[i];
            
            // if currSum is maximum than maxSum then just update it
            if(currSum > maxSum){
                maxSum = currSum;
            }
            
            // if negative number arrives just add it and check whether it is giving maximum value if yes then dont change it 
            // else discard it and update the value of currSum to 0.
            if(currSum < 0){
                currSum = 0;
            }
        }
    return maxSum;    
    }
};
