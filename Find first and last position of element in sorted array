/*
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

TC - O(log N)
SC - O(1)
*/

class Solution {
public:
    int firstOccurance(vector<int>& nums, int target){

        if(nums.size()==0){
            return -1;
        }
        int s=0;
        int e=nums.size()-1;
        int ans=-1;

        while(s<=e){
            int mid=s+(e-s)/2;

            if(nums[mid]==target){
                ans=mid;
                e=mid-1;
            }
            else if(nums[mid]>target){
                e=mid-1;
            }
            else{
                s=mid+1;
            }
            
        }
        return ans;
    }

    int lastOccurance(vector<int>& nums, int target){

        if(nums.size()==0){
            return -1;
        }
        int s=nums.size()-1;
        int e=0;
        int ans=-1;

        while(e<=s){
            int mid=e+(s-e)/2;

            if(nums[mid]==target){
                ans=mid;
                e=mid+1;
            }
            else if(nums[mid]>target){
                s=mid-1;
            }
            else{
                e=mid+1;
            }
            
        }
        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
     
        return{firstOccurance(nums,target), lastOccurance(nums,target)};

    }
};
