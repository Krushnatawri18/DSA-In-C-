/*
Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.

Example 1:
Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6

TC - O(N)
SC - O(N)
*/

#include <bits/stdc++.h> 
vector<int> firstNegativeInteger(vector<int> &arr, int k, int n)
{

    deque<int> dq;
    vector<int> ans;

    // processing first k sized window
    for(int i=0; i<k; i++){
        // storing indices of -ve integers
        if(arr[i] < 0){
            dq.push_back(i);
        }
    }

    // if dq has any index that means that first window has -ve integer
    if(dq.size() > 0){
        ans.push_back(arr[dq.front()]);
    }
    // else no negative integer exist in first k sized window
    else{
        ans.push_back(0);
    }

    // processing further windows
    for(int i=k; i<n; i++){

        // removing element from window
        // if dq is not empty that means we have index in dq 
        // that is leftmost index which is outside the current window
        // else dq is empty that means previous window didn't have any -ve integer
        if(!dq.empty() && i - dq.front() >= k){
            dq.pop_front();
        }

        // adding new element to window
        if(arr[i] < 0){
            dq.push_back(i);
        }

            // if dq has any index that means that first window has -ve integer
        if(dq.size() > 0){
            ans.push_back(arr[dq.front()]);
        }
        // else no negative integer exist in first k sized window
        else{
            ans.push_back(0);
        }

    }
    return ans;

}

