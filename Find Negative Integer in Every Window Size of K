/*
Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.

Example 1:
Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6

TC - O(N)
SC - O(N)
*/

vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K) {
                                                 
    deque<long long int> dq;
    vector<long long> ans;
    
    // processing first k window size elements
    for(int i=0; i<K; i++)
    {
        if(A[i] < 0)
        {
            dq.push_back(i);
        }
    }
    
    // storing first k sized window
    if(dq.size() > 0)
    {
        ans.push_back(A[dq.front()]);
    }
    else
    {
        ans.push_back(0);
    }
    
    for(int i=K; i<N; i++)
    {
        // removal of first element to get next element in window 
        if(!dq.empty() && i - dq.front() >= K)
        {
            dq.pop_front();
        }
        
        // addition of new element
        if(A[i] < 0)
        {
            dq.push_back(i);
        }
        
        // if dq is not empty then put A[dq.front()] element to ans
        if(dq.size() > 0)
        {
            ans.push_back(A[dq.front()]);
        }
        // else put 0
        else
        {
            ans.push_back(0);
        }
        
    }
    return ans;
 }
