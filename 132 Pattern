/*
Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].
Return true if there is a 132 pattern in nums, otherwise, return false.

Example 1:
Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.

Example 2:
Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].

Example 3:
Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

TC - O(N)
SC - O(N)
*/

class Solution {
public:
    bool find132pattern(vector<int>& nums) {  
        stack<int> s;
        int maxi = INT_MIN;

        for(int i=nums.size()-1; i>=0; i--){
            // checking whether nums[i] is less than maxi or not 
            // if yes then it's 132 pattern
            // finding jth element greater than ith element
            if(nums[i] < maxi){
                return true;
            }

            // finding new value maxi that is lesser than num[i]
            // finding jth element greater than kth element
            while(!s.empty() && s.top() < nums[i]){
                maxi = s.top();
                s.pop();
            }

            // pushing nums[i] for each element
            s.push(nums[i]);
        }
        return false;

    }
};
