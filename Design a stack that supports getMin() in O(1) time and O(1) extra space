/*
Create a stack data structure that allows operations such as push (adding an element), pop (removing the top element), top (retrieving the top element), and also provides a way to retrieve the minimum element in constant time.
Implement the following public functions :

1. push(data) : This function should take one argument of type integer. It pushes the element into the stack and returns nothing.

2. pop() : It pops the element from the top of the stack and returns nothing.

3. top() : It returns the element being kept at the top of the stack.

4.  getMin() : It returns the smallest element present in the stack.

Operations Performed on the Stack:
Query-1(Denoted by an integer 1): Pushes integer data to the stack. (push function)
Query-2(Denoted by an integer 2): Pops the data kept at the top of the stack. (pop function)
Query-3(Denoted by an integer 3): Fetches and returns the data being kept at the top of the stack. (top function)
Query-4(Denoted by an integer 4): Returns the smallest element present in the stack. (getMin() function)

Sample Input 1:
6
1 13
1 47
3
1 8
2
4
Sample Output 1:
47
13
Explanation of Input 1:
Query 1: Integer 1 represents the push function. Hence we push element ‘13’ onto the stack.
Query 2: Integer 1 represents the push function. Hence we push element ‘47’ onto the stack.
Query 3: Integer 3 represents the top function. Hence we print the top element in stack i.e. '47'.
Query 4: Integer 1 represents the push function. Hence we push element ‘8’ onto the stack.
Query 5: Integer 2 represents the pop function. The stack contains element ‘8’ at the top. We remove/pop ‘8’ from the stack and we have 13, 47 left in stack.
Query 6: Integer 4 represents the getMin function. Hence the min of current stack is '13'.

TC - O(1)
SC - O(1)
*/

#include <stack>
#include<climits>

class SpecialStack {
  stack<int> s;
  int mini;

public:
  SpecialStack(){
    mini = INT_MAX;
  }
  void push(int data) {
    // if current data < mini then just change mini
    if (data < mini) {
      int val = 2 * data - mini;
      s.push(val);
      mini = data;
    } 
    // normal push
    else {
      s.push(data);
    }
  }

  void pop() {
    if (s.empty()) {
      return;
    }

    // storing top element as curr and popping out
    int curr = s.top();
    s.pop();

    // if curr < mini that means curr was smaller than mini
    if (curr < mini) {
      int val = 2 * mini - curr;
      mini = val;
    } 

  }

  int top() {
    if (s.empty()) {
      return -1;
    }

    int curr = s.top();
    // returning true value by finding value by pop()
    if (curr < mini) {
      return mini;
    } 

    return curr;
  }

  int getMin() {
    return mini;
  }
};
