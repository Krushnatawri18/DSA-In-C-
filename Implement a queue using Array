/*
Implement a Queue Data Structure specifically to store integer data using a Singly Linked List or an array.
You need to implement the following public functions :

1. Constructor: It initializes the data members as required.
2. enqueue(data): This function should take one argument of type integer. It enqueues the element into the queue.
3. dequeue(): It dequeues/removes the element from the front of the queue and in turn, returns the element being dequeued or removed. In case the queue is empty, it returns -1.
4. front(): It returns the element being kept at the front of the queue. In case the queue is empty, it returns -1.
5. isEmpty(): It returns a boolean value indicating whether the queue is empty or not.

TC - O(1) for each operation
SC - O(N)
*/

#include <bits/stdc++.h> 
class Queue {
    int size;
    int qfront;
    int rear;
    int *arr;

public:
    Queue() {
        size=100001;
        arr=new int[size];
        qfront=0;
        rear=0;
    }

    /*----------------- Public Functions of Queue -----------------*/

    bool isEmpty() {
        if(qfront==rear){
            return true;
        }
        return false;
    }

    void enqueue(int data) {
        if(rear==size-1){
            return;
        }
        else{
            arr[rear++]=data;
        }
    }

    int dequeue() {
        if(isEmpty()){
            return -1;
        }
        int ans=arr[qfront];
            arr[qfront]=-1;
            qfront++;
            // checking whether any space is left or not if yes then go back to default positions
            if(qfront==rear){
                qfront=0;
                rear=0;
        }
        return ans;
    }

    int front() {
        if(isEmpty()){
            return -1;
        }
        return arr[qfront];
    }
};
