/*
You are given a queue Q of N integers of even length, rearrange the elements by interleaving the first half of the queue with the second half of the queue. 

Example 1:
Input:
N = 4
Q = {2,4,3,1}
Output:
{2,3,4,1}

TC - O(N)
SC - O(N)
*/

// Approach 1:-

class Solution{
public:
    vector<int> rearrangeQueue(queue<int> &q){
        
        queue <int> newQueue;
        vector<int> ans;
        int size = q.size()/2;
        
        // fetching first half elements from queue and pushing into new queue
        for(int i=0; i<size; i++)
        {
            int val = q.front();
            q.pop();
            newQueue.push(val);
        }
        
        // traversing while new queue get empty and pushing element to ans 
        while(!newQueue.empty())
        {
            int val = newQueue.front();
            newQueue.pop();
            ans.push_back(val);
            val = q.front();
            q.pop();
            ans.push_back(val);
        }
        
        return ans;
    }
};

#include <bits/stdc++.h> 
void interLeaveQueue(queue<int>& q) {
    
    queue<int> temp;
    int size = q.size();
    
    // pushing first half to other queue
    for(int i = 0; i < size / 2; i++) {
        temp.push(q.front()); 
        q.pop();
    }

    // now adding one element of main queue and then one element of temp queue
    while (!temp.empty()) {
        q.push(temp.front());
        temp.pop();
        q.push(q.front());
        q.pop();
    }
}

// Approach 2:- Using Stack

#include <bits/stdc++.h> 
void interLeaveQueue(queue<int>& q) {
    
    stack<int> s;
    int size = q.size() / 2;

    // pushing out first half of queue into stack => 3 4
    for(int i=0; i<size; i++){
        s.push(q.front());
        q.pop();
    }
    
    // pushing first half from stack into queue => 3 4 2 1
    while(!s.empty()){
        q.push(s.top());
        s.pop();
    }

    // pushing out second half of queue into queue => 2 1 3 4
    for(int i=0; i<size; i++){
        q.push(q.front());
        q.pop();
    }

    // pushing out first half of queue into stack => 3 4
    for(int i=0; i<size; i++){
        s.push(q.front());
        q.pop();
    }

    // pushing first half elem into queue and 
    // then second half elem into queue => 3 4 2 1
    while(!s.empty()){
        q.push(s.top());
        s.pop();
        q.push(q.front());
        q.pop();
    }

}
