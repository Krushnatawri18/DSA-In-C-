/*
Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.

Example 1:

Input: 
N = 5
arr[]= {0 2 1 2 0}
Output:
0 0 1 2 2
Explanation:
0s 1s and 2s are segregated into ascending order.

Example 2:
Input: 
N = 3
arr[] = {0 1 0}
Output:
0 0 1
Explanation:
0s 1s and 2s are segregated into ascending order.

Runtime - 108 ms

TC - O(N log N)
SC - O(1)
*/

class Solution
{
    public:
    void sort012(int a[], int n)
    {
        int low = 0;
        int mid = 0;
        int high = n - 1;
        
        while(mid <= high)
        {
            switch(a[mid]){
                
                // if 0 arrives just swap mid and low 
                case 0:
                    swap(a[low++],a[mid++]);
                    break;
                    
                // if 1 arrives just add mid = mid + 1
                case 1:
                    a[mid++];
                    break;
                    
                // if 2 arrives just swap mid with high and decrease high by 1 
                case 2:
                    swap(a[mid],a[high--]);
                    break;
            }
        }        
        
    }
    
};
