/*
Given an array of size N containing only 0s, 1s, and 2s; sort the array in ascending order.

Example 1:

Input: 
N = 5
arr[]= {0 2 1 2 0}
Output:
0 0 1 2 2
Explanation:
0s 1s and 2s are segregated into ascending order.

Example 2:
Input: 
N = 3
arr[] = {0 1 0}
Output:
0 0 1
Explanation:
0s 1s and 2s are segregated into ascending order.

Runtime - 108 ms

TC - O(N)
SC - O(1)
*/

// Approach 1:

class Solution
{
    public:
    void sort012(int a[], int n)
    {
        int low = 0;
        int mid = 0;
        int high = n - 1;
        
        while(mid <= high)
        {
            switch(a[mid]){
                
                // if 0 arrives just swap mid and low 
                case 0:
                    swap(a[low++],a[mid++]);
                    break;
                    
                // if 1 arrives just add mid = mid + 1
                case 1:
                    a[mid++];
                    break;
                    
                // if 2 arrives just swap mid with high and decrease high by 1 
                case 2:
                    swap(a[mid],a[high--]);
                    break;
            }
        }        
        
    }
    
};

/*Approach 2: Dutch National Flag Algorithm
The Dutch National Flag algorithm, also known as 3-way partitioning, is an algorithm for sorting an array containing three distinct values. 
The algorithm was designed to solve the problem of sorting an array containing only 0s, 1s, and 2s, which is similar to the problem in the given question.
The algorithm works by maintaining three pointers: low, mid, and high. The low pointer points to the beginning of the array, the high pointer points to the end of the array, and the mid pointer starts at the beginning of the array and moves through it.
The idea behind the algorithm is to keep all the 0s before the low pointer, all the 2s after the high pointer, and all the 1s between the low and high pointers. The algorithm moves the mid pointer through the array, comparing the value at each position with 1. If the value is 0, the element is swapped with the element at the low pointer, and the low and mid pointers are incremented. If the value is 2, the element is swapped with the element at the high pointer, and the high pointer is decremented. 
If the value is 1, the mid pointer is simply incremented.
*/

class Solution {
public:
    void sortColors(vector<int>& nums) {

        int low = 0;
        int mid = 0;
        int high = nums.size() - 1;

        while(mid <= high)
        {
            if(nums[mid] == 0)
            {
                swap(nums[low++],nums[mid++]);
            }
            else if(nums[mid] == 1)
            {
                mid++;
            }
            else
            {
               swap(nums[mid],nums[high--]); 
            }
        }
        
    }
};


