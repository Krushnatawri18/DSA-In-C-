/*
Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

Example 1:
Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).

TC - O(N log N)
SC - O(N)
*/

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        map<int,int> m ;

        for(auto x : nums){
            m[x]++;
        }

        int i = 0;

        for(auto x : m){
            int ele = x.first, freq = x.second;
            while(freq--){
                nums[i++] = ele;
            }
        }

        return nums;
    }
};
