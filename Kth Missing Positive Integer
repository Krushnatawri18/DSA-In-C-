/*
Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.
Return the kth positive integer that is missing from this array.

Example 1:
Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.

Example 2:
Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.
*/

/* Approach 1-
TC - O(N)
SC - O(1)
*/

class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        
        for(int i=0; i<arr.size(); i++){
            if(arr[i] <= k){
                k++;
            }
            else{
                break;
            }
        }
    return k;
    }
};

/* Approach 2-
TC - O(log N)
SC - O(1)
*/

class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        
        int low=0;
        int high=arr.size()-1;
        
        while(low <= high){
            int mid = low + (high-low)/2;
            //it will give 0 if it contains that (mid+1) element to arr[mid]
            //i.e. no missing number is there
            int missing = arr[mid]-(mid+1);

            if(missing < k){
                low= mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return k+high+1;
    }
};
