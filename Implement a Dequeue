/*
Design a data structure to implement deque of size ‘N’. It should support the following operations:

pushFront(X): Inserts an element X in the front of the deque. Returns true if the element is inserted, otherwise false.
pushRear(X): Inserts an element X in the back of the deque. Returns true if the element is inserted, otherwise false.
popFront(): Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
popRear(): Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element
getFront(): Returns the first element of the deque. If the deque is empty, it returns -1.
getRear(): Returns the last element of the deque. If the deque is empty, it returns -1.
isEmpty(): Returns true if the deque is empty, otherwise false.
isFull(): Returns true if the deque is full, otherwise false.

TC - O(1) for each operation
SC - O(N)
*/

#include <bits/stdc++.h>
class Deque {
  int *arr;
  int size;
  int front;
  int rear;

public:
  Deque(int n) {
    size = n;
    arr = new int[size];
    front = -1;
    rear = -1;
  }

  // Pushes 'X' in the front of the deque. Returns true if it gets pushed into
  // the deque, and false otherwise.
  bool pushFront(int x) {
    // check full or not
    if (isFull()) {
      return false;
    }

    // for first element
    else if (isEmpty()) {
      front = rear = 0;
    }

    // to maintain cyclic nature
    else if (front == 0 && rear != size - 1) {
      front = size - 1;
    }

    // normal push
    else {
      front--;
    }

    arr[front] = x;
    return true;
  }

  // Pushes 'X' in the back of the deque. Returns true if it gets pushed into
  // the deque, and false otherwise.
  bool pushRear(int x) {
    // check full or not
    if (isFull()) {
      return false;
    }

    // for first element
    else if (isEmpty()) {
      front = rear = 0;
    }

    // to maintain cyclic nature
    else if (rear == size - 1 && front != 0) {
      rear = 0;
    }

    // normal push
    else {
      rear++;
    }

    arr[rear] = x;
    return true;
  }

  // Pops an element from the front of the deque. Returns -1 if the deque is
  // empty, otherwise returns the popped element.
  int popFront() {
    // check empty or not
    if (isEmpty()) {
      return -1;
    }

    int ans = arr[front];
    arr[front] = -1;

    // single element
    if (front == rear) {
      front = rear = -1;
    }

    // to maintain cyclic nature
    else if (front == size - 1) {
      front = 0;
    }

    // normal pop
    else {
      front++;
    }

    return ans;
  }

  // Pops an element from the back of the deque. Returns -1 if the deque is
  // empty, otherwise returns the popped element.
  int popRear() {
    // check empty or not
    if (isEmpty()) {
      return -1;
    }

    int ans = arr[rear];
    arr[rear] = -1;

    // single element
    if (front == rear) {
      front = rear = -1;
    }

    // to maintain cyclic nature
    else if (rear == 0) {
      rear = size - 1;
    }

    // normal pop
    else {
      rear--;
    }

    return ans;
  }

  int getFront() {
    // empty or not
    if (isEmpty()) {
      return -1;
    }
    return arr[front];
  }

  int getRear() {
    // check empty or not
    if (isEmpty()) {
      return -1;
    }
    return arr[rear];
  }

  // Returns true if the deque is empty. Otherwise returns false.
  bool isEmpty() {
    if (front == -1) {
      return true;
    } 
    else {
      return false;
    }
  }

  // Returns true if the deque is full. Otherwise returns false.
  bool isFull() {
    if ((front == 0 && rear == size - 1) ||
        (front != 0 && rear == (front - 1) % (size - 1))) {
      return true;
    } 
    else {
      return false;
    }
  }
};
